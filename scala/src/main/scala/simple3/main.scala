package simple3

import java.lang.System.currentTimeMillis

@main
def main(): Unit =
  val startTime = currentTimeMillis()
  val tuples = for {
    i <- 1 to 6
    j <- 1 to 6
  } yield (i, j)
  // a_1*b_3 + a_2*b_1 + a_3*b_2 - a_1*b_2 - a_2*b_3 - a_3*b_1
  println(s"a: ${currentTimeMillis() - startTime}")
  var total = 0
  val x = tuples.combinations(13).filter { selection =>
    val result = !selection.combinations(3).exists { case Seq((a1, b1), (a2, b2), (a3, b3)) =>
      a1 * b3 + a2 * b1 + a3 * b2 - a1 * b2 - a2 * b3 - a3 * b1 == 0
    }
    if (result) println(s"$total - ${currentTimeMillis() - startTime} ms - $selection")
    total+=1
    if (total % 10000000 == 1) println(s"$total - ${currentTimeMillis() - startTime} ms")
    result
  }
  println(s"b: ${currentTimeMillis() - startTime}")
  println(s"${x.length} of ${total} found in ${currentTimeMillis() - startTime} ms")


//  val triplets = tuples.combinations(3).filter { case Seq((a1, b1), (a2, b2), (a3, b3)) =>
//    a1 * b3 + a2 * b1 + a3 * b2 - a1 * b2 - a2 * b3 - a3 * b1 == 0
//  }.toList
//  println(triplets.length)
//  println(triplets.length)
//  println(triplets.take(5).mkString("\n"))


/*

  1..4 und 8: 11 Lösungen (für 9 keine Lösungen)
(1,1), (1,2), (2,3), (2,4), (3,1), (3,2), (4,3), (4,4)
(1,1), (1,3), (2,1), (2,3), (3,2), (3,4), (4,2), (4,4)
(1,1), (1,3), (2,2), (2,4), (3,2), (3,4), (4,1), (4,3)
(1,1), (1,3), (2,3), (2,4), (3,1), (3,2), (4,2), (4,4)
(1,1), (1,4), (2,2), (2,3), (3,1), (3,4), (4,2), (4,3)
(1,2), (1,3), (2,1), (2,4), (3,1), (3,4), (4,2), (4,3)
(1,2), (1,3), (2,1), (2,4), (3,2), (3,3), (4,1), (4,4)
(1,2), (1,4), (2,1), (2,2), (3,3), (3,4), (4,1), (4,3)
(1,2), (1,4), (2,1), (2,3), (3,1), (3,3), (4,2), (4,4)
(1,2), (1,4), (2,2), (2,4), (3,1), (3,3), (4,1), (4,3)
(1,3), (1,4), (2,1), (2,2), (3,3), (3,4), (4,1), (4,2)

  1..5 und 10: 32 Lösungen (für 11 keine Lösungen)
(1,1), (1,2), (2,1), (2,4), (3,4), (3,5), (4,2), (4,3), (5,3), (5,5)
(1,1), (1,2), (2,2), (2,4), (3,1), (3,5), (4,3), (4,5), (5,3), (5,4)
(1,1), (1,3), (2,1), (2,2), (3,4), (3,5), (4,2), (4,5), (5,3), (5,4)
(1,1), (1,3), (2,2), (2,5), (3,4), (3,5), (4,1), (4,2), (5,3), (5,4)
(1,1), (1,3), (2,3), (2,4), (3,1), (3,2), (4,2), (4,5), (5,4), (5,5)
(1,1), (1,3), (2,3), (2,5), (3,1), (3,2), (4,4), (4,5), (5,2), (5,4)
(1,1), (1,4), (2,2), (2,4), (3,1), (3,5), (4,3), (4,5), (5,2), (5,3)
(1,2), (1,3), (2,1), (2,3), (3,1), (3,5), (4,2), (4,4), (5,4), (5,5)
(1,2), (1,3), (2,1), (2,4), (3,1), (3,2), (4,4), (4,5), (5,3), (5,5)
(1,2), (1,3), (2,1), (2,5), (3,4), (3,5), (4,1), (4,2), (5,3), (5,4)
(1,2), (1,3), (2,3), (2,5), (3,1), (3,5), (4,1), (4,4), (5,2), (5,4)
(1,2), (1,3), (2,3), (2,5), (3,1), (3,5), (4,2), (4,4), (5,1), (5,4)
(1,2), (1,3), (2,4), (2,5), (3,1), (3,2), (4,1), (4,4), (5,3), (5,5)
(1,2), (1,3), (2,4), (2,5), (3,1), (3,2), (4,1), (4,5), (5,3), (5,4)
(1,2), (1,4), (2,1), (2,2), (3,4), (3,5), (4,1), (4,3), (5,3), (5,5)
(1,2), (1,4), (2,1), (2,4), (3,1), (3,5), (4,3), (4,5), (5,2), (5,3)
(1,2), (1,4), (2,2), (2,5), (3,1), (3,5), (4,1), (4,3), (5,3), (5,4)
(1,2), (1,4), (2,4), (2,5), (3,1), (3,2), (4,3), (4,5), (5,1), (5,3)
(1,2), (1,5), (2,2), (2,4), (3,1), (3,5), (4,1), (4,3), (5,3), (5,4)
(1,3), (1,4), (2,1), (2,2), (3,4), (3,5), (4,1), (4,5), (5,2), (5,3)
(1,3), (1,4), (2,1), (2,2), (3,4), (3,5), (4,2), (4,5), (5,1), (5,3)
(1,3), (1,4), (2,1), (2,3), (3,1), (3,5), (4,2), (4,4), (5,2), (5,5)
(1,3), (1,4), (2,1), (2,3), (3,1), (3,5), (4,2), (4,5), (5,2), (5,4)
(1,3), (1,4), (2,1), (2,5), (3,1), (3,2), (4,4), (4,5), (5,2), (5,3)
(1,3), (1,4), (2,2), (2,5), (3,4), (3,5), (4,1), (4,2), (5,1), (5,3)
(1,3), (1,4), (2,3), (2,5), (3,1), (3,5), (4,2), (4,4), (5,1), (5,2)
(1,3), (1,5), (2,1), (2,3), (3,4), (3,5), (4,1), (4,2), (5,2), (5,4)
(1,3), (1,5), (2,1), (2,4), (3,1), (3,2), (4,4), (4,5), (5,2), (5,3)
(1,3), (1,5), (2,2), (2,3), (3,4), (3,5), (4,1), (4,4), (5,1), (5,2)
(1,3), (1,5), (2,4), (2,5), (3,1), (3,2), (4,1), (4,4), (5,2), (5,3)
(1,4), (1,5), (2,2), (2,4), (3,1), (3,5), (4,1), (4,3), (5,2), (5,3)
(1,4), (1,5), (2,2), (2,5), (3,1), (3,2), (4,3), (4,4), (5,1), (5,3)


  1..6 und 12:

a: 125
b: 188
c: 127238 - Vector((1,1), (1,2), (2,4), (2,6), (3,2), (3,5), (4,1), (4,3), (5,5), (5,6), (6,3), (6,4))
c: 127579 - Vector((1,1), (1,2), (2,4), (2,6), (3,3), (3,5), (4,1), (4,3), (5,2), (5,6), (6,4), (6,5))
c: 228318 - Vector((1,1), (1,3), (2,3), (2,5), (3,1), (3,2), (4,5), (4,6), (5,2), (5,4), (6,4), (6,6))
c: 236230 - Vector((1,1), (1,3), (2,4), (2,5), (3,2), (3,6), (4,1), (4,2), (5,5), (5,6), (6,3), (6,4))
c: 244626 - Vector((1,1), (1,3), (2,5), (2,6), (3,2), (3,5), (4,1), (4,2), (5,4), (5,6), (6,3), (6,4))
c: 290856 - Vector((1,1), (1,4), (2,1), (2,3), (3,4), (3,6), (4,2), (4,6), (5,3), (5,5), (6,2), (6,5))
c: 295371 - Vector((1,1), (1,4), (2,1), (2,5), (3,3), (3,4), (4,2), (4,6), (5,3), (5,6), (6,2), (6,5))
c: 314590 - Vector((1,1), (1,4), (2,3), (2,4), (3,1), (3,6), (4,2), (4,6), (5,2), (5,5), (6,3), (6,5))
c: 314605 - Vector((1,1), (1,4), (2,3), (2,4), (3,1), (3,6), (4,5), (4,6), (5,2), (5,3), (6,2), (6,5))
*/